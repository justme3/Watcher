.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::IMAPClient::MessageSet 3"
.TH Mail::IMAPClient::MessageSet 3 "2008-04-28" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Mail::IMAPClient::MessageSet \- ranges of message sequence nummers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& my @msgs = $imap->search("SUBJECT","Virus"); # returns 1,3,4,5,6,9,10
\& my $msgset = Mail::IMAPClient::MessageSet->new(@msgs);
\& print $msgset;  # prints "1,3:6,9:10"
.Ve
.PP
.Vb 3
\& # add message 14 to the set:
\& $msgset += 14;
\& print $msgset;  # prints "1,3:6,9:10,14"
.Ve
.PP
.Vb 3
\& # add messages 16,17,18,19, and 20 to the set:
\& $msgset .= "16,17,18:20";
\& print $msgset;  # prints "1,3:6,9:10,14,16:20"
.Ve
.PP
.Vb 3
\& # Hey, I didn't really want message 17 in there; let's take it out:
\& $msgset -= 17;
\& print $msgset;  # prints "1,3:6,9:10,14,16,18:20"
.Ve
.PP
.Vb 6
\& # Now let's iterate over each message:
\& for my $msg (@$msgset)
\& {  print "$msg\en";  # Prints: "1\en3\en4\en5\en6..16\en18\en19\en20\en"
\& }
\& print join("\en", @$msgset)."\en";     # same simpler
\& local $" = "\en"; print "@$msgset\en"; # even more simple
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBMail::IMAPClient::MessageSet\fR module is designed to make life easier
for programmers who need to manipulate potentially large sets of \s-1IMAP\s0
message \s-1UID\s0's or sequence numbers.
.PP
This module presents an object-oriented interface into handling your
message sets. The object reference returned by the new method is an
overloaded reference to a scalar variable that contains the message set's
compact \s-1RFC2060\s0 representation. The object is overloaded so that using
it like a string returns this compact message set representation. You
can also add messages to the set (using either a '.=' operator or a '+='
operator) or remove messages (with the '\-=' operator). And if you use
it as an array reference, it will humor you and act like one by calling
unfold for you.
.PP
\&\s-1RFC2060\s0 specifies that multiple messages can be provided to certain \s-1IMAP\s0
commands by separating them with commas. For example, \*(L"1,2,3,4,5\*(R" would
specify messages 1, 2, 3, 4, and (you guessed it!) 5. However, if you are
performing an operation on lots of messages, this string can get quite long.
So long that it may slow down your transaction, and perhaps even cause the
server to reject it. So \s-1RFC2060\s0 also permits you to specifiy a range of
messages, so that messages 1, 2, 3, 4 and 5 can also be specified as
\&\*(L"1:5\*(R".
.PP
This is where \fBMail::IMAPClient::MessageSet\fR comes in. It will convert
your message set into the shortest correct syntax. This could potentially
save you tons of network I/O, as in the case where you want to fetch the
flags for all messages in a 10000 message folder, where the messages
are all numbered sequentially. Delimited as commas, and making the
best-case assumption that the first message is message \*(L"1\*(R", it would take
48893 bytes to specify the whole message set using the comma-delimited
method. To specify it as a range, it takes just seven bytes (1:10000).
.PP
Note that the Mail::IMAPClient \fBRange\fR method can be used as
a short-cut to specifying \f(CW\*(C`Mail::IMAPClient::MessageSet\->new(@etc)\*(C'\fR.)
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
The only class method you need to worry about is \fBnew\fR. And if you create
your \fBMail::IMAPClient::MessageSet\fR objects via Mail::IMAPClient's
\&\fBRange\fR method then you don't even need to worry about \fBnew\fR.
.Sh "new"
.IX Subsection "new"
Example:
.PP
.Vb 1
\& my $msgset = Mail::IMAPClient::MessageSet->new(@msgs);
.Ve
.PP
The \fBnew\fR method requires at least one argument. That argument can be
either a message, a comma-separated list of messages, a colon-separated
range of messages, or a combination of comma-separated messages and
colon-separated ranges. It can also be a reference to an array of messages,
comma-separated message lists, and colon separated ranges.
.PP
If more then one argument is supplied to \fBnew\fR, then those arguments should
be more message numbers, lists, and ranges (or references to arrays of them)
just as in the first argument.
.PP
The message numbers passed to \fBnew\fR can really be any kind of number at
all but to be useful in a Mail::IMAPClient session they should be either
message \s-1UID\s0's (if your \fIUid\fR parameter is true) or message sequence numbers.
.PP
The \fBnew\fR method will return a reference to a \fBMail::IMAPClient::MessageSet\fR
object. That object, when double quoted, will act just like a string whose
value is the message set expressed in the shortest possible way, with the
message numbers sorted in ascending order and with duplicates removed.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
The only object method currently available to a \fBMail::IMAPClient::MessageSet\fR
object is the unfold method.
.Sh "unfold"
.IX Subsection "unfold"
Example:
.PP
.Vb 2
\&    my $msgset = $imap->Range( $imap->messages ) ;
\&    my @all_messages = $msgset->unfold;
.Ve
.PP
The \fBunfold\fR method returns an array of messages that belong to the
message set. If called in a scalar context it returns a reference to the
array instead.
.SH "OVERRIDDEN OPERATIONS"
.IX Header "OVERRIDDEN OPERATIONS"
\&\fBMail::IMAPClient::MessageSet\fR overrides a number of operators in order
to make manipulating your message sets easier. The overridden operations are:
.Sh "stringify"
.IX Subsection "stringify"
Attempts to stringify a \fBMail::IMAPClient::MessageSet\fR object will result in
the compact message specification being returned, which is almost certainly
what you will want.
.Sh "Auto-increment"
.IX Subsection "Auto-increment"
Attempts to autoincrement a \fBMail::IMAPClient::MessageSet\fR object will
result in a message (or messages) being added to the object's message set.
.PP
Example:
.PP
.Vb 2
\&    $msgset += 34;
\&    # Message #34 is now in the message set
.Ve
.Sh "Concatenate"
.IX Subsection "Concatenate"
Attempts to concatenate to a \fBMail::IMAPClient::MessageSet\fR object will
result in a message (or messages) being added to the object's message set.
.PP
Example:
.PP
.Vb 2
\&    $msgset .= "34,35,36,40:45";
\&    # Messages 34,35,36,40,41,42,43,44,and 45 are now in the message set
.Ve
.PP
The \f(CW\*(C`.=\*(C'\fR operator and the \f(CW\*(C`+=\*(C'\fR operator can be used interchangeably, but
as you can see by looking at the examples there are times when use of one
has an aesthetic advantage over use of the other.
.Sh "Autodecrement"
.IX Subsection "Autodecrement"
Attempts to autodecrement a \fBMail::IMAPClient::MessageSet\fR object will
result in a message being removed from the object's message set.
.PP
Examples:
.PP
.Vb 4
\&    $msgset -= 34;
\&    # Message #34 is no longer in the message set
\&    $msgset -= "1:10";
\&    # Messages 1 through 10 are no longer in the message set
.Ve
.PP
If you attempt to remove a message that was not in the original message set
then your resulting message set will be the same as the original, only more
expensive. However, if you attempt to remove several messages from the message
set and some of those messages were in the message set and some were not,
the additional overhead of checking for the messages that were not there
is negligable. In either case you get back the message set you want regardless
of whether it was already like that or not.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\& David J. Kernen
\& The Kernen Consulting Group, Inc
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 2
\& Copyright 1999, 2000, 2001, 2002 The Kernen Group, Inc.
\& All rights reserved.
.Ve
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either:
.ie n .IP "a) the ""Artistic License"" which comes with this Kit, or" 4
.el .IP "a) the ``Artistic License'' which comes with this Kit, or" 4
.IX Item "a) the Artistic License which comes with this Kit, or"
.PD 0
.IP "b) the \s-1GNU\s0 General Public License as published by the Free Software Foundation; either version 1, or (at your option) any later version." 4
.IX Item "b) the GNU General Public License as published by the Free Software Foundation; either version 1, or (at your option) any later version."
.PD
.PP
This program is distributed in the hope that it will be useful, but
\&\s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0. See either the \s-1GNU\s0
General Public License or the Artistic License for more details. All your
base are belong to us.
