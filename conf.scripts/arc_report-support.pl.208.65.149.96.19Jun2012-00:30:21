#!/usr/bin/perl -w

use strict;
use warnings;
use diagnostics;

use lib '/usr/local/bin/opsadmin/perl/';

use DBI;
use Data::Dumper;
use Switch;
use Getopt::Long qw(:config no_ignore_case bundling);
use MXL::Arch;
use MXL::MXL;
use XML::Simple;

require "ctime.pl";

our $AUTHOR     = 'John_Vossler@McAfee.com';
our $VERSION    = 2.1;
our $PODCONFIG  = '/mxl/etc/pod_config.xml';

our %flags = ();

$ENV{'PGPASSWORD'} = 'dbG0d';    # Export the postgres password

sub get_opts();
sub usage();

&get_opts();

if($flags{'debug'})
{
	print "flags\n";
	print Dumper(\%flags);
}

##
## Global variables
##
my %seen = ();
my $cid = ();
my $window = ();
my $lastrun = ();
my $prevrun = ();

##
## Create variables for solr segment summary
##
my $solr = ();
my @segments = ();
my @solrlabels = ();
my @solrcids = ();
my @lsolr = ();
my @allcids = ();
my @sids = ();
my @sids1 = ();
my @sids2 = ();
my $ssolr = ();
my $numcid = ();
my $solrcount1 = ();
my $solrcount2 = ();
my $solrseq = ();
my $solrseg1 = ();
my $solrseg2 = ();
my $solrcnt1 = ();
my $solrcnt2 = ();
my $sizemb1 = ();
my $sizemb2 = ();
my $mscnt = ();
my $mscount = ();
my $location = ();
my $usrcnt = ();
my $sid = ();
my $usercnt = ();
my $ingestperday = ();
my $solringestperday = ();
my $indexperday = ();
my $ndxbacklg = ();
my $solrej1 = ();
my $solrej2 = ();
my $masrej = ();
my $msbacklg = ();
my $region = ();

##
## Create variables for the server report
##
my $ip = ();
my @serverips = ();
my @srvips = ();
my $dnsdircnt = ();
my $dskdircnt = ();
my $dskfree = ();
my $severe1 = ();
my $severe2 = ();
my $srvtype = ();
my $custnm = ();
my $loc1 = ();
my $loc2 = ();
my $count = ();
my $timestamp = ();
my $Tusercnt = 0;
my $Tnumcid = 0;
my $Tsolrcount1 = 0;
my $Tsolrcount2 = 0;
my $Tsizemb1 = 0;
my $Tsizemb2 = 0;
my $Tmscount = 0;
my $Tndxbacklg = 0;
my $Tsolringestperday = 0;
my $Tindexperday = 0;
my $Tsolrej1 = 0;
my $Tsolrej2 = 0;
my $Tmasrej = 0;
my $Tsevere1 = 0;
my $Tsevere2 = 0;

#
# Get the time window based on the end time of the next to last successful run
#
$lastrun = `/usr/bin/psql -At -U postgres watcher -c "select epochtime from arc_lastrun order by epochtime desc limit 1"`;
chomp($lastrun);

$prevrun = `/usr/bin/psql -At -U postgres watcher -c "select epochtime from arc_lastrun order by epochtime desc limit 1 offset 1"`;
chomp($prevrun);
###$prevrun = `/usr/bin/psql -At -U postgres watcher -c "select extract(epoch from epochtime) from arc_lastrun order by epochtime desc limit 1 offset 1"`;

#
# print out report title
#
$timestamp = localtime(time());
printf "\n\n Supports Archiving report    -   %25s \n\n", $timestamp ;

printf "Watcher data  - From: %25s to %25s  \n\n", $prevrun, $lastrun ;

$ip = `/usr/bin/head -1 /root/dist/archiving_solr`;
chomp($ip);
$loc1 = `/usr/bin/psql -At -U postgres watcher -c "select datacenter from arc_server where srv_ip='$ip' order by epochtime desc limit 1"`;
chomp($loc1);

$loc2 = `/usr/bin/psql -At -U postgres watcher -c "select distinct(datacenter) from arc_server where datacenter!='$loc1' and epochtime between '$prevrun' and '$lastrun'"`;
chomp($loc2);

printf "Locations: %15s / %-15s \n\n", $loc1, $loc2 ;

##
## Get the global information needed
##
$region = `/mxl/sbin/arregion`;
chomp($region);

#
# Get the list of unique solr labels
#
@solrlabels=sort(`/usr/bin/psql -At -U postgres watcher -c "select distinct(solrlabel) from arc_cid where epochtime between '$prevrun' and '$lastrun'"`);

###undef %seen;
###@solrlabels = grep(!$seen{$_}++, @solrlabels);
###@solrlabels = ('solr-172.solr.pod1.director.mxlogic.net.');
chomp(@solrlabels);

if(($flags{'debug'}) || ($flags{'verbose'}))
{
   print "\nRegion = $region \n";
   print "\nsolr labels\n";
   print Dumper \@solrlabels;
}

##
## Begin section 3 - detailed solr data by CID
##
	printf "\n\n" ;

#
# Get the data and print out
#

	###foreach $solr ("solr-300.solr.region-0.pod2.director.mxlogic.net.") 
	foreach $solr (@solrlabels) 
	{
#
# Print out the headings
#

		printf "\n\n-------------------- %20s --------------------\n\n", $solr ;

		printf "     CID      Customer Name                           solr count           solr rejects      mas rejects  Index backlog   MS cnt        MS ID         MS backlog      Ingest/day \n\n" ;

#
# Get the list of all CIDs for this solr segment
#
		@allcids=`/usr/bin/psql -At -U postgres watcher -c "select cid from (select cid,solrcnt[1] from arc_cid where solrlabel='$solr' and epochtime between '$prevrun' and '$lastrun' order by solrcnt[1] desc ) as cid_sorted"`;

		undef %seen;
		@allcids = grep(!$seen{$_}++, @allcids);
		chomp(@allcids);


		foreach $cid (@allcids)
		{
			$custnm=`/usr/bin/psql -At -U postgres watcher -c "select cstnam from arc_cid where cid='$cid' and epochtime between '$prevrun' and '$lastrun' order by epochtime desc limit 1"`;
			chomp($custnm);

			$solrcnt1=`/usr/bin/psql -At -U postgres watcher -c "select coalesce(solrcnt[1],0)+coalesce(solrcnt[3],0)+coalesce(solrcnt[5],0)+coalesce(solrcnt[7],0)+coalesce(solrcnt[9],0) from arc_cid where cid='$cid' and epochtime between '$prevrun' and '$lastrun' order by epochtime desc limit 1"`;
			chomp($solrcnt1);

			$solrcnt2=`/usr/bin/psql -At -U postgres watcher -c "select coalesce(solrcnt[2],0)+coalesce(solrcnt[4],0)+coalesce(solrcnt[6],0)+coalesce(solrcnt[8],0)+coalesce(solrcnt[10],0) from arc_cid where cid='$cid' and epochtime between '$prevrun' and '$lastrun' order by epochtime desc limit 1"`;
			chomp($solrcnt2);

			$solrej1=`/usr/bin/psql -At -U postgres watcher -c "select coalesce(solrej[1],0)+coalesce(solrej[3],0)+coalesce(solrej[5],0)+coalesce(solrej[7],0)+coalesce(solrej[9],0) from arc_cid where cid='$cid' and epochtime between '$prevrun' and '$lastrun' order by epochtime desc limit 1"`;
			chomp($solrej1);

			$solrej2=`/usr/bin/psql -At -U postgres watcher -c "select coalesce(solrej[2],0)+coalesce(solrej[4],0)+coalesce(solrej[6],0)+coalesce(solrej[8],0)+coalesce(solrej[10],0) from arc_cid where cid='$cid' and epochtime between '$prevrun' and '$lastrun' order by epochtime desc limit 1"`;
			chomp($solrej2);

			$masrej=`/usr/bin/psql -At -U postgres watcher -c "select masrej from arc_cid where cid='$cid' order by epochtime desc limit 1"`;
			chomp($masrej);

			$ndxbacklg=`/usr/bin/psql -At -U postgres watcher -c "select solrndxbklg from arc_cid where cid='$cid' order by epochtime desc limit 1"`;
			chomp($ndxbacklg);

			$mscnt=`/usr/bin/psql -At -U postgres watcher -c "select mscnt from arc_cid where cid='$cid' order by epochtime desc limit 1"`;
			chomp($mscnt);

			@sids=`/usr/bin/psql -At -U postgres watcher -c "select distinct(sid) from arc_mailsource where cid='$cid' and ms_epochtime between '$prevrun' and '$lastrun'"`;
			chomp(@sids);

			if ( $#sids > 0 )
			{ # more than 1 sid reported
				printf "%12d  %-30s   %12d/%-12d   %6d/%-6d      %6d        %8d      %4d  ", $cid, (substr $custnm,0,30), $solrcnt1, $solrcnt2, $solrej1, $solrej2, $masrej, $ndxbacklg, $mscnt ;

				$count = 0;

				foreach $sid (@sids)
				{

					$msbacklg=`/usr/bin/psql -At -U postgres watcher -c "select ms_backlog from arc_mailsource where sid=$sid and ms_epochtime between '$prevrun' and '$lastrun' order by ms_epochtime desc limit 1"`;
					chomp($msbacklg);

					$ingestperday=`/usr/bin/psql -At -U postgres watcher -c "select ms_ingest24 from arc_mailsource where sid=$sid and ms_epochtime between '$prevrun' and '$lastrun' order by ms_epochtime desc limit 1"`;
					chomp($ingestperday);

					if ( $count > 0 )
					{
						printf "                                                                                                                                 %14d    %12d   %12d \n", $sid, $msbacklg, $ingestperday ;
					}
					else
					{
						printf " %14d    %12d   %12d \n", $sid, $msbacklg, $ingestperday ;
					}

					$count++;

				}
			}
			else # mscnt is 0 or 1
			{
				if ( $#sids < 0 )
				{ # no sids reported
					printf "%12d  %-30s   %12d/%-12d   %6d/%-6d      %6d        %8d      %4d \n", $cid, (substr $custnm,0,30), $solrcnt1, $solrcnt2, $solrej1, $solrej2, $masrej, $ndxbacklg, $mscnt ;
				}
				else
				{ # only 1 sid reported

					$sid = $sids[0];
           		chomp($sid);

					$msbacklg=`/usr/bin/psql -At -U postgres watcher -c "select sum(ms_backlog) from (select ms_backlog from arc_mailsource where cid='$cid' and ms_epochtime between '$prevrun' and '$lastrun' order by ms_epochtime desc limit $mscnt ) as backlog_tot"`;
					chomp($msbacklg);

					$ingestperday=`/usr/bin/psql -At -U postgres watcher -c "select sum(ms_ingest24) from (select ms_ingest24 from arc_mailsource where cid='$cid' and ms_epochtime between '$prevrun' and '$lastrun' order by ms_epochtime desc limit $mscnt ) as ingest24_tot"`;
					chomp($ingestperday);

					printf "%12d  %-30s   %12d/%-12d   %6d/%-6d      %6d        %8d      %4d   %14d    %12d   %12d \n", $cid, (substr $custnm,0,30), $solrcnt1, $solrcnt2, $solrej1, $solrej2, $masrej, $ndxbacklg, $mscnt, $sid, $msbacklg, $ingestperday ;

				}

			}

		}

	}

printf "\n\n" ;

##
## Get all command line options into flags hash
##
sub get_opts() 
{

	use Getopt::Long qw(:config no_ignore_case bundling);
	Getopt::Long::Configure("bundling");
	GetOptions(
		'summ|s'       => \$flags{'summ'},
		'debug|d'       => \$flags{'debug'},
		'verbose|v'     => \$flags{'verbose'},

		'help|usage|h'  => sub {warn &usage; exit 1;})
			or die &usage;

	defined($flags{'summ'}) || ($flags{'summ'} = 0);
	defined($flags{'debug'}) || ($flags{'debug'} = 0);
	defined($flags{'verbose'}) || ($flags{'verbose'} = 0);
}

# Subroutine:   usage
# Args:         <void>
# Return Value: <void>
# Purpose:      Write the appropriate usage to STDOUT.
sub usage()
{
my $usage = <<EOF;
Usage: $0 [OPTIONS]

    -v, --verbose             Verbose Mode
    -s, --summ                Summary data only (No detailed CID report - section 3)
    -d, --debug               Debug Mode (limited CIDs no DB writes)
    -h, --help                Print this help
EOF

        print $usage;
}

